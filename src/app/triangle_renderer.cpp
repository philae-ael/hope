
#include "triangle_renderer.h"
#include "core/core.h"
#include "core/vulkan/image.h"
#include "core/vulkan/pipeline.h"
#include <core/vulkan/subsystem.h>
#include <vk_mem_alloc.h>
#include <vulkan/vulkan_core.h>

core::array vertices{
    core::Vec4{-1, -1, 0},
    core::Vec4{1, -1, 0},
    core::Vec4{0, 1, 0},
};

const u32 code[] = {
    0x07230203, 0x00010600, 0x00110000, 0x00000038, 0x00000000, 0x00020011, 0x00000001, 0x0006000b,
    0x00000001, 0x4c534c47, 0x6474732e, 0x3035342e, 0x00000000, 0x0003000e, 0x00000000, 0x00000001,
    0x0007000f, 0x00000004, 0x00000002, 0x6e69616d, 0x00000000, 0x00000003, 0x00000004, 0x0009000f,
    0x00000000, 0x00000005, 0x6e69616d, 0x00000000, 0x00000006, 0x00000007, 0x00000008, 0x00000009,
    0x00030010, 0x00000002, 0x00000007, 0x00050007, 0x0000000a, 0x2e697274, 0x67617266, 0x00000000,
    0x00360003, 0x00000002, 0x000001c2, 0x0000000a, 0x72657623, 0x6e6f6973, 0x30353420, 0x2f2f0a0a,
    0x64616873, 0x69207265, 0x7475706e, 0x79616c0a, 0x2074756f, 0x636f6c28, 0x6f697461, 0x203d206e,
    0x69202930, 0x6576206e, 0x69203363, 0x6c6f436e, 0x0a3b726f, 0x6f2f2f0a, 0x75707475, 0x72772074,
    0x0a657469, 0x6f79616c, 0x28207475, 0x61636f6c, 0x6e6f6974, 0x30203d20, 0x756f2029, 0x65762074,
    0x6f203463, 0x72467475, 0x6f436761, 0x3b726f6c, 0x6f760a0a, 0x6d206469, 0x286e6961, 0x7b0a2029,
    0x2f2f090a, 0x75746572, 0x72206e72, 0x090a6465, 0x4674756f, 0x43676172, 0x726f6c6f, 0x76203d20,
    0x28346365, 0x6f436e69, 0x2c726f6c, 0x66302e31, 0x7d0a3b29, 0x00000a0a, 0x000a0004, 0x475f4c47,
    0x4c474f4f, 0x70635f45, 0x74735f70, 0x5f656c79, 0x656e696c, 0x7269645f, 0x69746365, 0x00006576,
    0x00080004, 0x475f4c47, 0x4c474f4f, 0x6e695f45, 0x64756c63, 0x69645f65, 0x74636572, 0x00657669,
    0x00050007, 0x0000000b, 0x2e697274, 0x74726576, 0x00000000, 0x00550003, 0x00000002, 0x000001c2,
    0x0000000b, 0x72657623, 0x6e6f6973, 0x30353420, 0x616c0a0a, 0x74756f79, 0x636f6c28, 0x6f697461,
    0x203d206e, 0x69202930, 0x6576206e, 0x70203363, 0x7469736f, 0x3b6e6f69, 0x79616c0a, 0x2074756f,
    0x636f6c28, 0x6f697461, 0x203d206e, 0x6f202930, 0x76207475, 0x20336365, 0x4374756f, 0x726f6c6f,
    0x760a0a3b, 0x2064696f, 0x6e69616d, 0x0a202928, 0x63090a7b, 0x74736e6f, 0x63657620, 0x6f632033,
    0x73726f6c, 0x205d335b, 0x6576203d, 0x335b3363, 0x090a285d, 0x63657609, 0x2e312833, 0x202c6630,
    0x66302e30, 0x2e30202c, 0x2c296630, 0x722f2f20, 0x090a6465, 0x63657609, 0x2e302833, 0x202c6630,
    0x66302e31, 0x2e30202c, 0x2c296630, 0x672f2f20, 0x6e656572, 0x7609090a, 0x28336365, 0x662e3030,
    0x2e30202c, 0x202c6630, 0x66302e31, 0x2f202029, 0x756c622f, 0x29090a65, 0x090a0a3b, 0x505f6c67,
    0x7469736f, 0x206e6f69, 0x6576203d, 0x70283463, 0x7469736f, 0x2c6e6f69, 0x302e3120, 0x0a3b2966,
    0x74756f09, 0x6f6c6f43, 0x203d2072, 0x6f6c6f63, 0x675b7372, 0x65565f6c, 0x78657472, 0x65646e49,
    0x0a3b5d78, 0x00000a7d, 0x000a0004, 0x475f4c47, 0x4c474f4f, 0x70635f45, 0x74735f70, 0x5f656c79,
    0x656e696c, 0x7269645f, 0x69746365, 0x00006576, 0x00080004, 0x475f4c47, 0x4c474f4f, 0x6e695f45,
    0x64756c63, 0x69645f65, 0x74636572, 0x00657669, 0x00040005, 0x00000002, 0x6e69616d, 0x00000000,
    0x00060005, 0x00000003, 0x4674756f, 0x43676172, 0x726f6c6f, 0x00000000, 0x00040005, 0x00000004,
    0x6f436e69, 0x00726f6c, 0x00040005, 0x00000005, 0x6e69616d, 0x00000000, 0x00060005, 0x0000000c,
    0x505f6c67, 0x65567265, 0x78657472, 0x00000000, 0x00060006, 0x0000000c, 0x00000000, 0x505f6c67,
    0x7469736f, 0x006e6f69, 0x00070006, 0x0000000c, 0x00000001, 0x505f6c67, 0x746e696f, 0x657a6953,
    0x00000000, 0x00070006, 0x0000000c, 0x00000002, 0x435f6c67, 0x4470696c, 0x61747369, 0x0065636e,
    0x00070006, 0x0000000c, 0x00000003, 0x435f6c67, 0x446c6c75, 0x61747369, 0x0065636e, 0x00030005,
    0x00000006, 0x00000000, 0x00050005, 0x00000007, 0x69736f70, 0x6e6f6974, 0x00000000, 0x00050005,
    0x00000008, 0x4374756f, 0x726f6c6f, 0x00000000, 0x00060005, 0x00000009, 0x565f6c67, 0x65747265,
    0x646e4978, 0x00007865, 0x00050005, 0x0000000d, 0x65646e69, 0x6c626178, 0x00000065, 0x0006014a,
    0x72746e65, 0x6f702d79, 0x20746e69, 0x6e69616d, 0x00000000, 0x0006014a, 0x65696c63, 0x7620746e,
    0x616b6c75, 0x3030316e, 0x00000000, 0x0006014a, 0x67726174, 0x652d7465, 0x7320766e, 0x76726970,
    0x00362e31, 0x0007014a, 0x67726174, 0x652d7465, 0x7620766e, 0x616b6c75, 0x332e316e, 0x00000000,
    0x0006014a, 0x72746e65, 0x6f702d79, 0x20746e69, 0x6e69616d, 0x00000000, 0x0006014a, 0x72746e65,
    0x6f702d79, 0x20746e69, 0x6e69616d, 0x00000000, 0x0006014a, 0x65696c63, 0x7620746e, 0x616b6c75,
    0x3030316e, 0x00000000, 0x0006014a, 0x67726174, 0x652d7465, 0x7320766e, 0x76726970, 0x00362e31,
    0x0007014a, 0x67726174, 0x652d7465, 0x7620766e, 0x616b6c75, 0x332e316e, 0x00000000, 0x0006014a,
    0x72746e65, 0x6f702d79, 0x20746e69, 0x6e69616d, 0x00000000, 0x0009014a, 0x6b6e694c, 0x62206465,
    0x50532079, 0x562d5249, 0x6f6f5420, 0x4c20736c, 0x656b6e69, 0x00000072, 0x00040047, 0x00000003,
    0x0000001e, 0x00000000, 0x00040047, 0x00000004, 0x0000001e, 0x00000000, 0x00050048, 0x0000000c,
    0x00000000, 0x0000000b, 0x00000000, 0x00050048, 0x0000000c, 0x00000001, 0x0000000b, 0x00000001,
    0x00050048, 0x0000000c, 0x00000002, 0x0000000b, 0x00000003, 0x00050048, 0x0000000c, 0x00000003,
    0x0000000b, 0x00000004, 0x00030047, 0x0000000c, 0x00000002, 0x00040047, 0x00000007, 0x0000001e,
    0x00000000, 0x00040047, 0x00000008, 0x0000001e, 0x00000000, 0x00040047, 0x00000009, 0x0000000b,
    0x0000002a, 0x00030047, 0x0000000d, 0x00000018, 0x00020013, 0x0000000e, 0x00030021, 0x0000000f,
    0x0000000e, 0x00030016, 0x00000010, 0x00000020, 0x00040017, 0x00000011, 0x00000010, 0x00000004,
    0x00040020, 0x00000012, 0x00000003, 0x00000011, 0x0004003b, 0x00000012, 0x00000003, 0x00000003,
    0x00040017, 0x00000013, 0x00000010, 0x00000003, 0x00040020, 0x00000014, 0x00000001, 0x00000013,
    0x0004003b, 0x00000014, 0x00000004, 0x00000001, 0x0004002b, 0x00000010, 0x00000015, 0x3f800000,
    0x00040015, 0x00000016, 0x00000020, 0x00000000, 0x0004002b, 0x00000016, 0x00000017, 0x00000001,
    0x0004001c, 0x00000018, 0x00000010, 0x00000017, 0x0006001e, 0x0000000c, 0x00000011, 0x00000010,
    0x00000018, 0x00000018, 0x00040020, 0x00000019, 0x00000003, 0x0000000c, 0x0004003b, 0x00000019,
    0x00000006, 0x00000003, 0x00040015, 0x0000001a, 0x00000020, 0x00000001, 0x0004002b, 0x0000001a,
    0x0000001b, 0x00000000, 0x0004003b, 0x00000014, 0x00000007, 0x00000001, 0x0004002b, 0x00000010,
    0x0000001c, 0x3f800000, 0x00040020, 0x0000001d, 0x00000003, 0x00000013, 0x0004003b, 0x0000001d,
    0x00000008, 0x00000003, 0x0004002b, 0x00000016, 0x0000001e, 0x00000003, 0x0004001c, 0x0000001f,
    0x00000013, 0x0000001e, 0x0004002b, 0x00000010, 0x00000020, 0x00000000, 0x0006002c, 0x00000013,
    0x00000021, 0x0000001c, 0x00000020, 0x00000020, 0x0006002c, 0x00000013, 0x00000022, 0x00000020,
    0x0000001c, 0x00000020, 0x0006002c, 0x00000013, 0x00000023, 0x00000020, 0x00000020, 0x0000001c,
    0x0006002c, 0x0000001f, 0x00000024, 0x00000021, 0x00000022, 0x00000023, 0x00040020, 0x00000025,
    0x00000001, 0x0000001a, 0x0004003b, 0x00000025, 0x00000009, 0x00000001, 0x00040020, 0x00000026,
    0x00000007, 0x0000001f, 0x00040020, 0x00000027, 0x00000007, 0x00000013, 0x00040008, 0x0000000a,
    0x00000009, 0x0000000b, 0x00050036, 0x0000000e, 0x00000002, 0x00000000, 0x0000000f, 0x000200f8,
    0x00000028, 0x00040008, 0x0000000a, 0x0000000c, 0x00000000, 0x0004003d, 0x00000013, 0x00000029,
    0x00000004, 0x00050051, 0x00000010, 0x0000002a, 0x00000029, 0x00000000, 0x00050051, 0x00000010,
    0x0000002b, 0x00000029, 0x00000001, 0x00050051, 0x00000010, 0x0000002c, 0x00000029, 0x00000002,
    0x00070050, 0x00000011, 0x0000002d, 0x0000002a, 0x0000002b, 0x0000002c, 0x00000015, 0x0003003e,
    0x00000003, 0x0000002d, 0x000100fd, 0x00010038, 0x00040008, 0x0000000a, 0x00000006, 0x0000000b,
    0x00050036, 0x0000000e, 0x00000005, 0x00000000, 0x0000000f, 0x000200f8, 0x0000002e, 0x0005003b,
    0x00000026, 0x0000000d, 0x00000007, 0x00000024, 0x00040008, 0x0000000a, 0x0000000e, 0x00000000,
    0x0004003d, 0x00000013, 0x0000002f, 0x00000007, 0x00050051, 0x00000010, 0x00000030, 0x0000002f,
    0x00000000, 0x00050051, 0x00000010, 0x00000031, 0x0000002f, 0x00000001, 0x00050051, 0x00000010,
    0x00000032, 0x0000002f, 0x00000002, 0x00070050, 0x00000011, 0x00000033, 0x00000030, 0x00000031,
    0x00000032, 0x0000001c, 0x00050041, 0x00000012, 0x00000034, 0x00000006, 0x0000001b, 0x0003003e,
    0x00000034, 0x00000033, 0x00040008, 0x0000000a, 0x0000000f, 0x00000000, 0x0004003d, 0x0000001a,
    0x00000035, 0x00000009, 0x00050041, 0x00000027, 0x00000036, 0x0000000d, 0x00000035, 0x0004003d,
    0x00000013, 0x00000037, 0x00000036, 0x0003003e, 0x00000008, 0x00000037, 0x000100fd, 0x00010038
};

TriangleRenderer TriangleRenderer::init(subsystem::video& v, VkFormat format) {
  VkBuffer buffer;
  VmaAllocation buf_alloc;
  VkBufferCreateInfo buf_create_info{
      .sType                 = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO,
      .size                  = sizeof(f32) * 4 * 3,
      .usage                 = VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,
      .sharingMode           = VK_SHARING_MODE_EXCLUSIVE,
      .queueFamilyIndexCount = 1,
      .pQueueFamilyIndices   = &v.device.omni_queue_family_index
  };
  VmaAllocationCreateInfo alloc_create_info{
      .flags = VMA_ALLOCATION_CREATE_HOST_ACCESS_SEQUENTIAL_WRITE_BIT,
      .usage = VMA_MEMORY_USAGE_AUTO,
  };
  vmaCreateBuffer(v.allocator, &buf_create_info, &alloc_create_info, &buffer, &buf_alloc, nullptr);
  vmaCopyMemoryToAllocation(v.allocator, &vertices, buf_alloc, 0, sizeof(vertices));

  core::array<VkDescriptorPoolSize, 0> pool_sizes{};
  VkDescriptorPoolCreateInfo descriptor_pool_create_info{
      .sType         = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
      .maxSets       = 1,
      .poolSizeCount = (u32)pool_sizes.size(),
      .pPoolSizes    = pool_sizes.data,
  };
  VkDescriptorPool descriptor_pool;
  vkCreateDescriptorPool(v.device, &descriptor_pool_create_info, nullptr, &descriptor_pool);

  // # Layout
  VkPipelineLayoutCreateInfo pipeline_layout_create_info{
      .sType                  = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,
      .setLayoutCount         = 0,
      .pSetLayouts            = nullptr,
      .pushConstantRangeCount = 0,
      .pPushConstantRanges    = nullptr
  };
  VkPipelineLayout pipeline_layout;
  vkCreatePipelineLayout(v.device, &pipeline_layout_create_info, nullptr, &pipeline_layout);

  // # Pipeline
  VkShaderModuleCreateInfo fragment_module_create_info{
      .sType    = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO,
      .codeSize = sizeof(code),
      .pCode    = code,
  };
  VkShaderModule module;
  VK_ASSERT(vkCreateShaderModule(v.device, &fragment_module_create_info, nullptr, &module));

  core::array shader_stage_create_infos{
      VkPipelineShaderStageCreateInfo{
          .sType  = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
          .stage  = VK_SHADER_STAGE_VERTEX_BIT,
          .module = module,
          .pName  = "main"
      },
      VkPipelineShaderStageCreateInfo{
          .sType  = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
          .stage  = VK_SHADER_STAGE_FRAGMENT_BIT,
          .module = module,
          .pName  = "main"
      },
  };

  core::array vertex_binding_descriptions{VkVertexInputBindingDescription{
      .binding   = 0,
      .stride    = sizeof(f32) * 4,
      .inputRate = VK_VERTEX_INPUT_RATE_VERTEX,
  }};
  core::array vertex_attribute_descriptions{VkVertexInputAttributeDescription{
      .binding = 0,
      .format  = VK_FORMAT_R32G32B32_SFLOAT,
      .offset  = 0,
  }};

  core::array color_blend_attachments{
      vk::pipeline::ColorBlendAttachement::NoBlend.vk(),
  };
  core::array dynamic_states{VK_DYNAMIC_STATE_VIEWPORT, VK_DYNAMIC_STATE_SCISSOR};

  VkPipeline pipeline =
      vk::pipeline::Pipeline{
          .rendering     = {.color_attachment_formats = {1, &format}},
          .shader_stages = shader_stage_create_infos,
          .vertex_input  = {vertex_binding_descriptions, vertex_attribute_descriptions},
          .color_blend   = {color_blend_attachments},
          .dynamic_state = {dynamic_states},
      }
          .build(v.device, pipeline_layout);

  vkDestroyShaderModule(v.device, module, nullptr);
  return {descriptor_pool, pipeline, pipeline_layout, buffer, buf_alloc};
}
void TriangleRenderer::uninit(subsystem::video& v) {
  vkDestroyPipeline(v.device, pipeline, nullptr);
  vkDestroyPipelineLayout(v.device, pipeline_layout, nullptr);
  vmaDestroyBuffer(v.allocator, buffer, buf_allocation);
  vkDestroyDescriptorPool(v.device, descriptor_pool, nullptr);
}
